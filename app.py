
import tkinter as tk
from tkinter import ttk, messagebox, filedialog
import qrcode
from PIL import Image, ImageTk
import random
import datetime
import json
import os
from receipt_template import ReceiptGenerator

class PaymaApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Payma - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢")
        self.root.geometry("1000x750")
        self.root.configure(bg='#f5f6fa')
        
        # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.products = [
            {"id": 1, "name": "‡∏ô‡πâ‡∏≥‡∏î‡∏∑‡πà‡∏°", "price": 10, "category": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "stock": 100},
            {"id": 2, "name": "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", "price": 15, "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "stock": 50},
            {"id": 3, "name": "‡∏ô‡∏°", "price": 20, "category": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "stock": 80},
            {"id": 4, "name": "‡∏Å‡∏≤‡πÅ‡∏ü", "price": 25, "category": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "stock": 60},
            {"id": 5, "name": "‡∏ö‡∏∞‡∏´‡∏°‡∏µ‡πà‡∏Å‡∏∂‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡∏£‡∏π‡∏õ", "price": 12, "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "stock": 120},
            {"id": 6, "name": "‡∏ô‡πâ‡∏≥‡∏≠‡∏±‡∏î‡∏•‡∏°", "price": 18, "category": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "stock": 90},
            {"id": 7, "name": "‡∏ú‡∏•‡πÑ‡∏°‡πâ", "price": 30, "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "stock": 40},
            {"id": 8, "name": "‡∏ä‡πá‡∏≠‡∏Ñ‡πÇ‡∏Å‡πÅ‡∏•‡∏ï", "price": 22, "category": "‡∏Ç‡∏ô‡∏°", "stock": 70},
            {"id": 9, "name": "‡∏Ç‡πâ‡∏≤‡∏ß‡∏Å‡∏•‡πà‡∏≠‡∏á", "price": 45, "category": "‡∏≠‡∏≤‡∏´‡∏≤‡∏£", "stock": 30},
            {"id": 10, "name": "‡∏ô‡πâ‡∏≥‡∏ú‡∏•‡πÑ‡∏°‡πâ", "price": 25, "category": "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°", "stock": 85}
        ]
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        self.cart = []
        
        # ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        self.sales_history = []
        self.load_sales_history()
        
        # ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        self.receipt_generator = ReceiptGenerator()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå
        self.create_data_folders()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á UI
        self.create_widgets()
        
    def create_data_folders(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"""
        folders = ['receipts', 'data', 'reports']
        for folder in folders:
            if not os.path.exists(folder):
                os.makedirs(folder)
    
    def load_sales_history(self):
        """‡πÇ‡∏´‡∏•‡∏î‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå"""
        try:
            if os.path.exists('data/sales_history.json'):
                with open('data/sales_history.json', 'r', encoding='utf-8') as f:
                    self.sales_history = json.load(f)
        except:
            self.sales_history = []
    
    def save_sales_history(self):
        """‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå"""
        try:
            with open('data/sales_history.json', 'w', encoding='utf-8') as f:
                json.dump(self.sales_history, f, ensure_ascii=False, indent=2)
        except:
            pass
    
    def create_widgets(self):
        # ‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏±‡∏ß
        header_frame = tk.Frame(self.root, bg='#2c3e50', height=90)
        header_frame.pack(fill=tk.X, padx=0, pady=0)
        
        title_label = tk.Label(header_frame, text="üõçÔ∏è Payma - ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", 
                              font=("TH Sarabun New", 26, "bold"), bg='#2c3e50', fg='white')
        title_label.pack(pady=20)
        
        # ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
        menu_frame = tk.Frame(self.root, bg='#34495e', height=40)
        menu_frame.pack(fill=tk.X, padx=0, pady=0)
        
        menu_buttons = [
            ("üè† ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å", self.show_home),
            ("üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", self.show_reports),
            ("‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", self.show_settings)
        ]
        
        for text, command in menu_buttons:
            btn = tk.Button(menu_frame, text=text, command=command,
                           bg='#34495e', fg='white', font=("TH Sarabun New", 12),
                           relief=tk.FLAT)
            btn.pack(side=tk.LEFT, padx=5, pady=5)
        
        # ‡πÄ‡∏ü‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å
        self.main_frame = tk.Frame(self.root, bg='#f5f6fa')
        self.main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        self.show_home()
    
    def show_home(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å"""
        self.clear_main_frame()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏Å
        home_frame = tk.Frame(self.main_frame, bg='#f5f6fa')
        home_frame.pack(fill=tk.BOTH, expand=True)
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏£‡∏ß‡∏î‡πÄ‡∏£‡πá‡∏ß
        stats_frame = tk.Frame(home_frame, bg='#ffffff', relief=tk.RAISED, bd=1)
        stats_frame.pack(fill=tk.X, padx=10, pady=10)
        
        # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
        today_sales = sum(sale['total'] for sale in self.sales_history 
                         if sale['date'].startswith(datetime.datetime.now().strftime("%Y-%m-%d")))
        
        stats_data = [
            ("üí∞ ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{today_sales:,.2f} ‡∏ö‡∏≤‡∏ó"),
            ("üì¶ ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î", f"{len(self.products)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"),
            ("üõí ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ", f"{len([s for s in self.sales_history if s['date'].startswith(datetime.datetime.now().strftime('%Y-%m-%d'))])} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        ]
        
        for i, (title, value) in enumerate(stats_data):
            stat_frame = tk.Frame(stats_frame, bg=['#e8f6f3', '#fdedec', '#f4ecf7'][i])
            stat_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=5, pady=10)
            
            tk.Label(stat_frame, text=title, font=("TH Sarabun New", 12), 
                    bg=stat_frame['bg']).pack(pady=(5, 0))
            tk.Label(stat_frame, text=value, font=("TH Sarabun New", 16, "bold"), 
                    bg=stat_frame['bg']).pack(pady=(0, 5))
        
        # ‡πÄ‡∏ü‡∏£‡∏°‡πÄ‡∏ô‡∏∑‡πâ‡∏≠‡∏´‡∏≤‡∏´‡∏•‡∏±‡∏Å
        content_frame = tk.Frame(home_frame, bg='#f5f6fa')
        content_frame.pack(fill=tk.BOTH, expand=True)
        
        # ‡πÄ‡∏ü‡∏£‡∏°‡∏ã‡πâ‡∏≤‡∏¢ - ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        left_frame = tk.Frame(content_frame, bg='#ffffff', relief=tk.RAISED, bd=1)
        left_frame.pack(side=tk.LEFT, fill=tk.BOTH, expand=True, padx=(0, 10))
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product_label = tk.Label(left_frame, text="üì¶ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", 
                               font=("TH Sarabun New", 18, "bold"), 
                               bg='#3498db', fg='white', pady=10)
        product_label.pack(fill=tk.X)
        
        # ‡∏ï‡∏±‡∏ß‡∏Å‡∏£‡∏≠‡∏á‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category_frame = tk.Frame(left_frame, bg='#ecf0f1')
        category_frame.pack(fill=tk.X, padx=10, pady=10)
        
        tk.Label(category_frame, text="‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà:", font=("TH Sarabun New", 12), 
                bg='#ecf0f1').pack(side=tk.LEFT, padx=(0, 10))
        
        categories = ["‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"] + list(set([p["category"] for p in self.products]))
        self.category_var = tk.StringVar()
        self.category_combo = ttk.Combobox(category_frame, textvariable=self.category_var, 
                                         values=categories, state="readonly", 
                                         font=("TH Sarabun New", 12))
        self.category_combo.set("‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")
        self.category_combo.pack(side=tk.LEFT, fill=tk.X, expand=True)
        self.category_combo.bind('<<ComboboxSelected>>', self.filter_products)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        product_canvas_frame = tk.Frame(left_frame, bg='#ffffff')
        product_canvas_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=(0, 10))
        
        self.product_canvas = tk.Canvas(product_canvas_frame, bg='#ffffff')
        self.product_canvas.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        
        scrollbar = tk.Scrollbar(product_canvas_frame, orient="vertical", 
                               command=self.product_canvas.yview)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        self.product_frame = tk.Frame(self.product_canvas, bg='#ffffff')
        self.product_canvas.create_window((0, 0), window=self.product_frame, anchor="nw")
        
        self.product_frame.bind("<Configure>", self.on_frame_configure)
        self.product_canvas.configure(yscrollcommand=scrollbar.set)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        self.create_product_buttons()
        
        # ‡πÄ‡∏ü‡∏£‡∏°‡∏Ç‡∏ß‡∏≤ - ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
        right_frame = tk.Frame(content_frame, bg='#ffffff', relief=tk.RAISED, bd=1)
        right_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True, padx=(10, 0))
        
        # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        cart_label = tk.Label(right_frame, text="üõí ‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", 
                             font=("TH Sarabun New", 18, "bold"), 
                             bg='#2ecc71', fg='white', pady=10)
        cart_label.pack(fill=tk.X)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        cart_display_frame = tk.Frame(right_frame, bg='#ffffff')
        cart_display_frame.pack(fill=tk.BOTH, expand=True, padx=10, pady=10)
        
        # ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        cart_list_frame = tk.Frame(cart_display_frame, bg='#ffffff')
        cart_list_frame.pack(fill=tk.BOTH, expand=True)
        
        self.cart_listbox = tk.Listbox(cart_list_frame, font=("TH Sarabun New", 12), height=10)
        self.cart_listbox.pack(fill=tk.BOTH, expand=True)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
        button_frame = tk.Frame(cart_display_frame, bg='#ffffff')
        button_frame.pack(fill=tk.X, pady=5)
        
        remove_btn = tk.Button(button_frame, text="‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å", 
                              command=self.remove_from_cart,
                              bg='#e74c3c', fg='white', font=("TH Sarabun New", 11))
        remove_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        clear_btn = tk.Button(button_frame, text="‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", 
                             command=self.clear_cart,
                             bg='#f39c12', fg='white', font=("TH Sarabun New", 11))
        clear_btn.pack(side=tk.LEFT)
        
        # ‡πÅ‡∏™‡∏î‡∏á‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°
        self.total_label = tk.Label(cart_display_frame, text="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: 0.00 ‡∏ö‡∏≤‡∏ó", 
                                   font=("TH Sarabun New", 16, "bold"), 
                                   bg='#ffffff', fg='#2c3e50')
        self.total_label.pack(pady=5)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£
        action_frame = tk.Frame(cart_display_frame, bg='#ffffff')
        action_frame.pack(fill=tk.X, pady=10)
        
        qr_btn = tk.Button(action_frame, text="üí∞ ‡∏™‡πÅ‡∏Å‡∏ô QR Code", 
                          command=self.show_qr_code, bg='#9b59b6', fg='white', 
                          font=("TH Sarabun New", 12), width=12)
        qr_btn.pack(side=tk.LEFT, padx=(0, 5))
        
        receipt_btn = tk.Button(action_frame, text="üßæ ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", 
                               command=self.print_receipt, bg='#e67e22', fg='white', 
                               font=("TH Sarabun New", 12), width=12)
        receipt_btn.pack(side=tk.LEFT)
        
        # ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á QR Code
        self.qr_label = tk.Label(cart_display_frame, 
                                text="QR Code ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", 
                                bg='#ecf0f1', fg='#7f8c8d', font=("TH Sarabun New", 12), 
                                height=8, relief=tk.SUNKEN, bd=1)
        self.qr_label.pack(fill=tk.BOTH, expand=True)
    
    def show_reports(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô"""
        self.clear_main_frame()
        
        report_frame = tk.Frame(self.main_frame, bg='#f5f6fa')
        report_frame.pack(fill=tk.BOTH, expand=True)
        
        tk.Label(report_frame, text="üìä ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢", 
                font=("TH Sarabun New", 24, "bold"), bg='#f5f6fa').pack(pady=20)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Treeview ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        columns = ("date", "receipt_no", "items", "total")
        tree = ttk.Treeview(report_frame, columns=columns, show="headings", height=15)
        
        tree.heading("date", text="‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà")
        tree.heading("receipt_no", text="‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à")
        tree.heading("items", text="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
        tree.heading("total", text="‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)")
        
        tree.column("date", width=120)
        tree.column("receipt_no", width=100)
        tree.column("items", width=100)
        tree.column("total", width=100)
        
        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        for sale in self.sales_history[-20:]:  # ‡πÅ‡∏™‡∏î‡∏á 20 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î
            tree.insert("", "end", values=(
                sale['date'],
                sale['receipt_no'],
                len(sale['items']),
                f"{sale['total']:,.2f}"
            ))
        
        tree.pack(fill=tk.BOTH, expand=True, padx=20, pady=10)
        
        # ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
        export_btn = tk.Button(report_frame, text="üì§ ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô PDF", 
                              command=self.export_report, bg='#27ae60', fg='white',
                              font=("TH Sarabun New", 14))
        export_btn.pack(pady=10)
    
    def show_settings(self):
        """‡πÅ‡∏™‡∏î‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤"""
        self.clear_main_frame()
        
        settings_frame = tk.Frame(self.main_frame, bg='#f5f6fa')
        settings_frame.pack(fill=tk.BOTH, expand=True)
        
        tk.Label(settings_frame, text="‚öôÔ∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö", 
                font=("TH Sarabun New", 24, "bold"), bg='#f5f6fa').pack(pady=20)
        
        # ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ
        settings = [
            ("üè™ ‡∏ä‡∏∑‡πà‡∏≠‡∏£‡πâ‡∏≤‡∏ô:", "Payma Store"),
            ("üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£:", "02-123-4567"),
            ("üìß ‡∏≠‡∏µ‡πÄ‡∏°‡∏•:", "info@payma.com"),
            ("üí≥ ‡∏†‡∏≤‡∏©‡∏µ (%):", "7")
        ]
        
        for i, (label, default) in enumerate(settings):
            frame = tk.Frame(settings_frame, bg='#f5f6fa')
            frame.pack(fill=tk.X, padx=50, pady=5)
            
            tk.Label(frame, text=label, font=("TH Sarabun New", 14), 
                    bg='#f5f6fa', width=15, anchor='e').pack(side=tk.LEFT)
            
            entry = tk.Entry(frame, font=("TH Sarabun New", 14), width=30)
            entry.insert(0, default)
            entry.pack(side=tk.LEFT, padx=10)
    
    def clear_main_frame(self):
        """‡∏•‡πâ‡∏≤‡∏á‡πÄ‡∏ü‡∏£‡∏°‡∏´‡∏•‡∏±‡∏Å"""
        for widget in self.main_frame.winfo_children():
            widget.destroy()
    
    def on_frame_configure(self, event):
        self.product_canvas.configure(scrollregion=self.product_canvas.bbox("all"))
    
    def create_product_buttons(self):
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏õ‡∏∏‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤"""
        for widget in self.product_frame.winfo_children():
            widget.destroy()
        
        selected_category = self.category_combo.get()
        if selected_category == "‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î":
            products_to_show = self.products
        else:
            products_to_show = [p for p in self.products if p["category"] == selected_category]
        
        row, col = 0, 0
        for product in products_to_show:
            product_frame = tk.Frame(self.product_frame, bg='#ecf0f1', relief=tk.RAISED, bd=1)
            product_frame.grid(row=row, column=col, padx=5, pady=5, sticky="nsew")
            
            product_btn = tk.Button(product_frame, 
                                   text=f"{product['name']}\n{product['price']} ‡∏ö‡∏≤‡∏ó\n‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠: {product['stock']}",
                                   command=lambda p=product: self.add_to_cart(p),
                                   bg='#3498db', fg='white', font=("TH Sarabun New", 10),
                                   width=15, height=4)
            product_btn.pack(padx=5, pady=5, fill=tk.BOTH, expand=True)
            
            col += 1
            if col > 2:
                col = 0
                row += 1
        
        for i in range(row + 1):
            self.product_frame.rowconfigure(i, weight=1)
        for i in range(3):
            self.product_frame.columnconfigure(i, weight=1)
    
    def filter_products(self, event=None):
        self.create_product_buttons()
    
    def add_to_cart(self, product):
        if product['stock'] > 0:
            self.cart.append(product)
            self.update_cart_display()
            messagebox.showinfo("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", f"‡πÄ‡∏û‡∏¥‡πà‡∏° {product['name']} ‡∏•‡∏á‡πÉ‡∏ô‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!")
        else:
            messagebox.showwarning("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î", f"{product['name']} ‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏´‡∏°‡∏î‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß")
    
    def remove_from_cart(self):
        selection = self.cart_listbox.curselection()
        if selection:
            index = selection[0]
            removed_product = self.cart.pop(index)
            self.update_cart_display()
        else:
            messagebox.showwarning("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö")
    
    def clear_cart(self):
        if self.cart:
            self.cart = []
            self.update_cart_display()
        else:
            messagebox.showwarning("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤")
    
    def update_cart_display(self):
        self.cart_listbox.delete(0, tk.END)
        
        total = 0
        for product in self.cart:
            self.cart_listbox.insert(tk.END, f"{product['name']} - {product['price']:.2f} ‡∏ö‡∏≤‡∏ó")
            total += product["price"]
        
        self.total_label.config(text=f"‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:,.2f} ‡∏ö‡∏≤‡∏ó")
    
    def show_qr_code(self):
        if not self.cart:
            messagebox.showwarning("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏Å‡πà‡∏≠‡∏ô‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
            return
        
        total = sum(product["price"] for product in self.cart)
        ref_number = random.randint(100000, 999999)
        timestamp = datetime.datetime.now().strftime("%d/%m/%Y %H:%M")
        
        payment_data = f"""Payma - ‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:,.2f} ‡∏ö‡∏≤‡∏ó
‡∏£‡∏´‡∏±‡∏™‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á: {ref_number}
‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {timestamp}

‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£!"""
        
        qr = qrcode.QRCode(version=1, error_correction=qrcode.constants.ERROR_CORRECT_L, box_size=6, border=2)
        qr.add_data(payment_data)
        qr.make(fit=True)
        
        qr_image = qr.make_image(fill_color="black", back_color="white")
        qr_image = qr_image.resize((200, 200), Image.Resampling.LANCZOS)
        
        self.qr_photo = ImageTk.PhotoImage(qr_image)
        self.qr_label.config(image=self.qr_photo, text="")
        
        messagebox.showinfo("‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô", f"‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô\n‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {total:,.2f} ‡∏ö‡∏≤‡∏ó")
    
    def print_receipt(self):
        if not self.cart:
            messagebox.showwarning("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡∏•‡πà‡∏≤ ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ")
            return
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        sale_data = {
            'date': datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            'receipt_no': f"PM{datetime.datetime.now().strftime('%Y%m%d')}{random.randint(1000, 9999)}",
            'items': self.cart,
            'total': sum(product["price"] for product in self.cart),
            'tax_rate': 7
        }
        
        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
        self.sales_history.append(sale_data)
        self.save_sales_history()
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        receipt_path = self.receipt_generator.generate_receipt(sale_data)
        
        # ‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à
        self.cart = []
        self.update_cart_display()
        self.qr_label.config(image='', text="QR Code ‡∏à‡∏∞‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏î‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô")
        
        messagebox.showinfo("‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", f"‡∏û‡∏¥‡∏°‡∏û‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!\n‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à: {sale_data['receipt_no']}")
    
    def export_report(self):
        """‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô PDF"""
        filename = filedialog.asksaveasfilename(
            defaultextension=".pdf",
            filetypes=[("PDF files", "*.pdf")],
            title="‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô PDF"
        )
        
        if filename:
            try:
                from reportlab.lib.pagesizes import A4
                from reportlab.pdfgen import canvas
                from reportlab.lib.utils import ImageReader
                from reportlab.pdfbase import pdfmetrics
                from reportlab.pdfbase.ttfonts import TTFont
                
                # ‡∏™‡∏£‡πâ‡∏≤‡∏á PDF
                c = canvas.Canvas(filename, pagesize=A4)
                width, height = A4
                
                # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                c.setFont("Helvetica-Bold", 16)
                c.drawString(100, height - 100, "‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢ - Payma System")
                
                c.setFont("Helvetica", 12)
                c.drawString(100, height - 130, f"‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô: {datetime.datetime.now().strftime('%d/%m/%Y %H:%M')}")
                
                # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô
                y_position = height - 180
                headers = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£", "‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)"]
                col_widths = [120, 100, 80, 80]
                
                # ‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏ï‡∏≤‡∏£‡∏≤‡∏á
                x_position = 100
                for i, header in enumerate(headers):
                    c.setFont("Helvetica-Bold", 10)
                    c.drawString(x_position, y_position, header)
                    x_position += col_widths[i]
                
                y_position -= 20
                
                # ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
                c.setFont("Helvetica", 9)
                for sale in self.sales_history[-20:]:
                    x_position = 100
                    values = [
                        sale['date'],
                        sale['receipt_no'],
                        str(len(sale['items'])),
                        f"{sale['total']:,.2f}"
                    ]
                    
                    for i, value in enumerate(values):
                        c.drawString(x_position, y_position, value)
                        x_position += col_widths[i]
                    
                    y_position -= 15
                    if y_position < 100:
                        c.showPage()
                        y_position = height - 100
                
                c.save()
                messagebox.showinfo("‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", "‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÄ‡∏õ‡πá‡∏ô PDF ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")
                
            except Exception as e:
                messagebox.showerror("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ: {str(e)}")

if __name__ == "__main__":
    root = tk.Tk()
    app = PaymaApp(root)
    root.mainloop()
